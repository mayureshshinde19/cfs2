<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup field_service_line Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in field_service_line_field_info(),
 * field_service_line_field_validate() and field_service_line_field_is_empty().
 * field_service_line_field_schema() is implemented in field_service_line.install.
 *
 * Our module sets up a formatter in field_service_line_field_formatter_info() and
 * field_service_line_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 *
 * And finally, our module defines the widget in
 * field_service_line_field_widget_info() and field_service_line_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function field_service_line_field_info() {
  return array(
    
	'user_service_lines_type' => array(
      'label' => t('user service line'),
      'description' => t('service line to which user belongs to.'),
      'default_widget' => 'field_service_line_hierarchical_select',
      'default_formatter' => 'texonomy_terms_display',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function field_service_line_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
/*
  foreach ($items as $delta => $item) {
    if (!empty($item['user_service_lines'])) {
      if (!preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'field_service_line_invalid',
          'message' => t('Color must be in the HTML format #abcdef.'),
        );
      }
    }
  }
  */
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_empty() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function field_service_line_field_is_empty($item, $field) {
 switch ($field['type']) {
	   case 'user_service_lines_type':
           return empty($item['user_service_lines']);
  }
}

/**
 * Implements hook_field_formatter_info().*/
function field_service_line_field_formatter_info() {
  return array(
	'texonomy_terms_display' => array(
      'label' => t('selected display service lines in terms'),
      'field types' => array('user_service_lines_type'),
    ),
	'texonomy_termsid_display' => array(
      'label' => t('display selected service lines in term-ids'),
      'field types' => array('user_service_lines_type'),
    ),
	
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - field_service_line_simple_text just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - field_service_line_color_background does the same but also changes the
 *   background color of div.region-content.
 *
 * @see field_service_line_field_formatter_info()
 */
function field_service_line_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

 return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see field_service_line_field_widget_form()
 */
function field_service_line_field_widget_info() {
  return array(
	'field_service_line_hierarchical_select' => array(
      'label' => t('hierarchical select'),
      'field types' => array('user_service_lines_type'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_service_line_colorpicker' and 'field_service_line_text' are essentially
 * the same, but field_service_line_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_service_line_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function field_service_line_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	
 if($field['type'] == 'user_service_lines_type')
 {    
    global $user;
     $dataloaded = variable_get('data_loaded',1);
     $widget = $element;
	 if($element['#entity_type'] =='user' && $element['#entity']->uid != 0 && $dataloaded == 1)
	 {
		 $user_instance = variable_get("user_instance",-1);
         $service_access=field_service_line_get_service_lines($user_instance,$element['#entity']->uid);
		 variable_set('service_line_set',array_combine(field_service_line_get_term_serviceline($service_access),$service_access));
		 variable_set('data_loaded',0);
	 }
	 else{
	      if($element['#entity_type'] =='user' && $element['#entity']->uid == 0)
          variable_set('service_line_set',array());
         }
	 switch ($instance['widget']['type']) {
          case 'field_service_line_hierarchical_select':
		     $field_name = $field['field_name'];
             $field_data = array(
                'field_name' => $field_name,
                'langcode' => $langcode,
                'delta' => $delta,
             );
       $form_state['serviceline']['field_data'] = $field_data;
       $widget = array();
	   //$widget['#validate']= array('field_service_line_hierarchical_select_validate');
	   $widget['service_line_container'] = array(
            '#type' => 'fieldset',
	        '#title' => '.....Select Service Line.....',
			//'#element_validate' => array('field_service_line_hierarchical_select_validate'),
	        '#weight' => $widget['body']['#weight']+1,
            '#tree' => TRUE,
            '#attributes' => array('class' => array('container-inline')), 
	      '#prefix' => '<div id = "field_service_line_ajax_wrapper">',
          '#suffix' => '</div>',
	        );
     
	  $is_parent = 1; 
      $level = 0;
      if(isset($form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']))
        {   
          while(isset($form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"]))
          //while($form_state['values']['service_line_container']["level_$level"]!='')
	         {   
		        $next_level = $level+1;
	            if($level ==0)
		          {   
			         if($user->uid!=1 && $instance[entity_type]== 'node')
					   {
						 $user_instance = variable_get("user_instance",-1);
						 if($user_instance==-1)
						 {
							 return (array());
						 }
					     $service_access=field_service_line_get_service_lines($user_instance, $user->uid);
					     $soptions = array("" => 'select service line')+ array_combine($service_access,field_service_line_get_term_serviceline($service_access));
					   }
					 else
					   {
						 $soptions = array("" => 'select field')+field_service_line_get_root_nodes(5);
					   }
		              $widget['service_line_container']["level_$level"] = array(
                            '#type' => 'select',
						    '#options' =>  $soptions,
                            '#required' => TRUE,
	                        '#default_value' => $form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"],
                            '#ajax' => array(
	                        'callback' => 'field_service_line_ajax_callback',
                            'wrapper' => 'field_service_line_ajax_wrapper',
							//'method' => 'replace',
	                        ),
                            );
		          }
		        else 
			      {
	                  $level--;
					 if($instance[entity_type]== 'node' && $user->uid!=1 && $level == 0)
					  {
					    $service_paths = explode(':',$tid = $form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_0"]);
					    $tid = $service_paths[count($service_paths)-1];
					  }
					  else
					  {
					    $tid = $form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"];
					  }
                     // $tid = field_service_line_get_tid($form_state['values']['service_line_container']["level_$level"]);
	                 // $childs =taxonomy_get_children($tid->fetchObject()->tid);
					  $childs =taxonomy_get_children($tid);
	                  $childs_keys = array_keys($childs);
	                  $child_names = array();
					  $level++;
		              if(count($childs)!=0)
	                     {  
					        for($j=0;$j<count($childs_keys);$j++)
	                            {
	                               $child_names[] = $childs[$childs_keys[$j]]->name;
	                            }
								$soptions = array("" => '')+ array_combine($childs_keys,$child_names);
		                    if($is_parent == 0)
						        {  
						           $widget['service_line_container']["level_$level"]=array( 
	                               '#type'  => 'select',
	                             //  '#options' => drupal_map_assoc(array_merge(array('0'=>''),$child_names)),
								   '#options' => $soptions,
	                               '#ajax' => array(
                                           'callback' => 'field_service_line_ajax_callback',
                                           'wrapper' => 'field_service_line_ajax_wrapper',
										 //  'method' => 'replace',
	                                ),
	                                );
						          // field_service_line_set_modified_time("service_line_container[level_$level]");
					           	 $level++;
						           break;
					    	    }
						    else
						        {
						           $widget['service_line_container']["level_$level"]=array( 
	                               '#type'  => 'select',
	                             //'#options' => drupal_map_assoc(array_merge(array('0'=>''),$child_names)),
							       '#options' =>$soptions,
	                               '#default_value' => $form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"],
	                               '#ajax' => array(
	                                       'callback' => 'field_service_line_ajax_callback',
                                           'wrapper' => 'field_service_line_ajax_wrapper',
										 //  'method' => 'replace',
	                                ),
	                                );
						           $is_parent = 1;
						        }
		                 }
		               else
					     {   
		                    $is_parent = 0;
		                    break;
		                 }
		          }
	           /*  if(field_service_line_is_timestamp_large($level,$form_id) == 0)
	   	            {
		               $is_parent = 0;
		            }
					*/
			     $child_level= $level+1;
				 if($form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$child_level"]!='')
				 {	 
				 if(field_service_line_is_parent($form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"],$form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$child_level"])==0)
				 {
				    $is_parent = 0;
				 }
				 }
		         $level++;
	         }
        }
      
      if($is_parent==1)
        {
            if($level == 0)
                {  
         			if($user->uid!=1 && $instance[entity_type]== 'node')
					   {
					     $user_instance = variable_get("user_instance",-1);
						  if($user_instance==-1)
						 {
							 return (array());
						 }
					     $service_access=field_service_line_get_service_lines($user_instance,$user->uid);
					     $soptions = array("" => 'select service line')+ array_combine($service_access,field_service_line_get_term_serviceline($service_access));
					   }
					 else
					   {
					     $soptions = array("" => 'select field')+field_service_line_get_root_nodes(5);
					   }
                    $widget['service_line_container']["level_$level"] = array(
                    '#type' => 'select',
                  //'#options' => drupal_map_assoc(array_merge(array('0'=>''),field_service_line_get_root_nodes(8))),
				    '#options' => $soptions,
                    '#required' => TRUE,
					'#default_value' => '',
                    '#ajax' => array(
	                'callback' => 'field_service_line_ajax_callback',
                    'wrapper' => 'field_service_line_ajax_wrapper',
					//'method' => 'replace',
	                ),
                    );
				    //ee_struct_add_field("service_line_container[level_$level]");
                }
            else{  
		            $level--;
					if($instance[entity_type]== 'node' && $user->uid!=1 && $level==0)
					  {
					    $service_paths = explode(':',$tid = $form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_0"]);
					    $tid = $service_paths[count($service_paths)-1];
					  }
					  else
					  {
					    $tid = $form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"];
					  }
                    if(isset($form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"]))
				  // if($form_state['values']['service_line_container']["level_$level"]!='')
                        {  
							   $childs =taxonomy_get_children($tid);
							   
	                           $childs_keys = array_keys($childs);
							   
	                           $child_names = array();
		                       if(count($childs)!=0)
	                             {     
                                  $level++;
                                  for($j=0;$j<count($childs_keys);$j++)
	                                   {
	                                        $child_names[] = $childs[$childs_keys[$j]]->name;
	                                   }
								  $soptions = array("" => '')+ array_combine($childs_keys,$child_names);   
		                          $widget['service_line_container']["level_$level"] = array(
                                  '#type' => 'select',
                                 // '#options' => drupal_map_assoc(array_merge(array('0'=>''),$child_names)),
								  '#options' =>$soptions,
			                      '#ajax' => array(
	                              'callback' => 'field_service_line_ajax_callback',
                                  'wrapper' => 'field_service_line_ajax_wrapper',
								 // 'method' => 'replace',
	                              ),
                                  );
	                             }
	        
			             }  
                 // field_service_line_add_field("service_line_container[level_$level]");						 
                }
		
	    }
	  else
	    {
	        while(array_key_exists("level_$level",$form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']))
	           {    
	                unset($form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"]);
				   //ree_struct_delete_field("service_line_container[level_$level]");
	                $level++;
	           }
	    }
	
      $widget['service_line_container']['add_serv'] = array(
			 '#type' => 'button',
             '#id' => 'add_serv',
             '#name' => 'add_serv',
             '#value' => t('Add service'),
			 
			 //'#executes_submit_callback' => FALSE,
			 '#prefix' => '<div id = "add_button">',
             '#suffix'=>'</div>',
	         '#ajax' => array(
	               'callback' => 'field_service_line_button_callback',
                   'wrapper' => 'field_service_line_ajax_inwrapper',
				   'method' => 'replace',
                  // 'event' => 'click',
	        ),
	        );
	 
			
      $widget['service_line_container']['selected_service_lines'] = array(
            '#type' => 'fieldset',
	        );
			
	  $widget['service_line_container']['selected_service_lines']['service_line_data'] = array(
            '#type' => 'markup',
			'#prefix' => '<div id = "field_service_line_ajax_inwrapper">',
            '#suffix' => '</div>',
	        );
	  
	  $service_line_array = variable_get('service_line_set',array());
      if(count($service_line_array)>0)
        {  
			$output = '<table>';  
	        foreach($service_line_array as $key => $value)
	            {
	              $output .= '<tr><td>'."$key".'</td><td>'.l(t('Remove'), 'service_lines/delete', array('query'=>array('delete_item'=>"$value"),'attributes' => array('class' => array('use-ajax')))).'</td></tr>';
	            }
            $output .= '</table>';
		    //$form_state['values']['service_line_container']['selected_service_lines']['service_line_data']['#markup']= $output;
	        $widget['service_line_container']['selected_service_lines']['service_line_data'] = array(
            '#type' => 'markup',
		    '#prefix' => '<div id = "field_service_line_ajax_inwrapper">',
            '#suffix' => '</div>',
	        '#markup' =>"$output",
	        );		
		}
	  else
	   {
	        //$form_state['values']['service_line_container']['selected_service_lines']['service_line_data']['#markup']='No service line selected yet';
			$widget['service_line_container']['selected_service_lines']['service_line_data'] = array(
            '#type' => 'markup',
			'#prefix' => '<div id = "field_service_line_ajax_inwrapper">',
            '#suffix' => '</div>',
	        '#markup' =>'No service line selected yet',
	        );	
	    }
		
       $element['user_service_lines'] = $widget;
   
	
	
	}
  
 } 
  
 
  return $element;
}


/**
 * Validate the individual fields and then convert to RGB string.
 */
function field_service_line_hierarchical_select_validate($form, $form_state) {
  // @todo: Isn't there a better way to find out which element?
     print_r("<pre>");
	 print_r($form);
	 exit();
	 $value = serialize(implode("#",array_values(variable_get('service_line_set',array()))));
	 //$form_state['rebuild'] = FALSE;
     form_set_value($element, $value, $form_state);

}

/**

 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see field_service_line_field_validate()
 * @see form_error()
 */
function field_service_line_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'field_service_line_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * Implements hook_menu().
 *
 * Provides a simple user interface that tells the developer where to go.
 */
function field_service_line_menu() {
	
 $items['service_lines/delete'] = array(
    'page callback' => 'field_service_line_remove_serviceline',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );
  $items['examples/field_service_line'] = array(
    'title' => 'Field service line',
    'page callback' => '_field_service_line_page',
    'access callback' => TRUE,
  );
  
  
  return $items;
}

/**
 * A simple page to explain to the developer what to do.
 */
function _field_service_line_page() {
  return t("The Field for adding service line to users(admin) and documents (user)");
}
/**
 * @} End of "defgroup field_service_line".
 */

 
 
function field_service_line_remove_serviceline()
  {
    $item_to_delete = $_GET['delete_item'];
	
	$service_line_array =  variable_get('service_line_set',array());
    $key = array_search($item_to_delete, $service_line_array);
    unset($service_line_array[$key]);
	variable_set('service_line_set',$service_line_array); 
	$output = '<div id="field_service_line_ajax_inwrapper">NO service line selected</div>';
    if(count($service_line_array)>0)
     {	
    $output = '<div id="field_service_line_ajax_inwrapper"><table>';  
	foreach($service_line_array as $key => $value)
	  {
	  $output .= '<tr><td>'."$key".'</td><td>'.l(t('Remove'), 'service_lines/delete', array('query'=>array('delete_item'=>"$value"),'attributes' => array('class' => array('use-ajax')))).'</td></tr>';
	  }
      $output .= '</table></div>';
	 }
	
  $result = array(
      '#type' => 'ajax',
      '#commands' => array(
        ajax_command_replace('#field_service_line_ajax_inwrapper', $output),
      ),
    );
    return $result;
	}
	
function field_service_line_get_root_nodes($vid)
{
  $itree = taxonomy_get_tree($vid, 0, 1,FALSE);
  $root_terms= array();
  
  for($i=0;$i<count($itree);$i++)
  {
  $root_terms[]=$itree[$i]->name;
  $root_tids[]=$itree[$i]->tid;
  }
  return array_combine ($root_tids , $root_terms);
//return root_terms;
}

function field_service_line_ajax_callback($form , $form_state)
{     
      
	  $field_name = $form_state['serviceline']['field_data']['field_name'];
      $delta = $form_state['serviceline']['field_data']['delta'];
      $langcode = $form_state['serviceline']['field_data']['langcode'];
	 /* print_r("<pre>");
	  print_r( $form[$field_name][$langcode][$delta][user_service_lines]);
	  exit();*/
  return $form[$field_name][$langcode][$delta][user_service_lines];
	 
}

function field_service_line_ajax1_callback($form , $form_state)
{
     
      return $widget['service_lines_container'];
	 
}


function field_service_line_button_callback($form , $form_state)
{      
       $widget = array();
       $level = 0; 
	   $field_name = $form_state['serviceline']['field_data']['field_name'];
       $delta = $form_state['serviceline']['field_data']['delta'];
       $langcode = $form_state['serviceline']['field_data']['langcode'];
	   
       if($form_state['triggering_element']['#name'] == 'add_serv')
        {   
	     
		     while($form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"]!='')
	           {  
	
	                if($level == 0)
	                   {  
	                      $service_path = $form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"];
						 
	                   }
	                else
			           {  
					      
	                      $service_path = $service_path . ':' . $form_state['values'][$field_name][$langcode][$delta][user_service_lines]['service_line_container']["level_$level"];
						   //field_service_line_delete_field("level_$level");
					   }
	                
			       
			        $level++;
		        }
		    if(strlen($service_path)>0)
		       {
		            field_service_line_add_service_line($service_path);
					/*print_r("<pre>");
                    print_r($service_path);
                    exit();*/
		       }
			else
			{
			$widget['service_line_container']['selected_service_lines']['service_line_data'] = array(
            '#type' => 'markup',
			'#prefix' => '<div id = "field_service_line_ajax_inwrapper">',
            '#suffix' => '</div>',
	        '#markup' =>'No service line selected yet',
	        );
            			
			return $widget;
			}
			
        }
		$widget = field_service_line_put_display();
		
	 
		
	 return $widget;
	 

}

function field_service_line_button1_callback($form , $form_state)
{
       $level = 0; 
       if($form_state['triggering_element']['#name'] == 'add_serv')
        {   
		     while($form_state['values']['service_lines_container']["level_$level"]!='')
	           {    
	                if($level == 0)
	                   {
	                      $service_path = $form_state['values']['service_lines_container']["level_$level"];
	                   }
	                else
			           {
	                      $service_path = $service_path . ':' .  $form_state['values']['service_lines_container']["level_$level"];
					   }
	               // unset($form_state['values']['service_lines_container']["level_$level"]);
			       // field_service_line_delete_field("level_$level");
			        $level++;
		        }
		    if(strlen($service_path)>0)
		       {
		            field_service_line_add_service_line($service_path);
		       }
			
			
        }
		field_service_line_put_display1($form , $form_state);
		
	 
		
	 return $widget['service_lines_container'];
	 

}


function field_service_line_put_display()
{  
	$widget = array();
    $service_line_array = variable_get('service_line_set',array());
      if(count($service_line_array)>0)
        {  
			$output = '<table>';  
	        foreach($service_line_array as $key => $value)
	            {
					$output .= '<tr><td>'."$key".'</td><td>'.l(t('Remove'), 'service_lines/delete', array('query'=>array('delete_item'=>"$value"),'attributes' => array('class' => array('use-ajax')))).'</td></tr>';
	            }
            $output .= '</table>';
		    $widget['service_line_container']['selected_service_lines']['service_line_data'] = array(
            '#type' => 'markup',
		    '#prefix' => '<div id = "field_service_line_ajax_inwrapper">',
            '#suffix' => '</div>',
	        '#markup' =>"$output",
	        );		
		} 
	  return $widget;
}

function field_service_line_put_display1(&$form , &$form_state)
{
    $service_line_array = variable_get('service_line_set',array());
      if(count($service_line_array)>0)
        {  
			$output = '<table>';  
	        foreach($service_line_array as $key => $value)
	            {
	              $output .= '<tr><td>'."$key".'</td><td>'.l(t('Remove'), 'service_line/delete', array('query'=>array('delete_item'=>"$value"),'attributes' => array('class' => array('use-ajax')))).'</td></tr>';
	            }
            $output .= '</table>';
		    $widget['service_lines_container']['selected_service_lines']['service_line_data'] = array(
            '#type' => 'markup',
		    '#prefix' => '<div id = "field_service_line_ajax_inwrapper">',
            '#suffix' => '</div>',
	        '#markup' =>"$output",
	        );		
		} 
	  
}

function field_service_line_get_term_serviceline($in_array)
{
    /*print_r("pre");
    print_r($in_array);
	exit();*/
$term_service_lines = array();

if(count($in_array)>0)
{
 $i=0;
 foreach($in_array as $service_line)
 {
    $tids = explode(":",$service_line);
	$j=0;
   foreach($tids as $tid)
   {
   $term = taxonomy_term_load($tid);
   $t_name = $term->name;
   if($j==0)
   {
     $term_service_lines[$i]=$t_name;
   }
   else
   {
     $term_service_lines[$i]= $term_service_lines[$i].':'.$t_name;
   }
   $j++;
   }
   $i++;
 }
 return $term_service_lines;
}
return array();
}


function field_service_line_get_tid($name)
{
 return db_query_range('SELECT ttd.tid
  FROM {taxonomy_term_data} ttd
  WHERE ttd.name = :name',
  0, 1, array(':name' => $name));
}

function field_service_line_add_service_line($service_line)
{ $is_parent = 0;
  $service_line_array = array_values(variable_get('service_line_set',array()));
  if(count($service_line_array)!=0)
    { 
	  for($i = 0 ; $i<count($service_line_array);$i++)
	  {  
	      
	     if(strstr($service_line_array[$i],$service_line)!=FALSE)
		 {
		  $is_parent = 1;
          break;
		 }
	  }
	  
	  for($i = 0 ; $i<count($service_line_array);$i++)
	  {  
	      
	     if(strstr($service_line.':',$service_line_array[$i].':')!=FALSE)
		 {
		  unset($service_line_array[$i]);
		 }
	  }
	  if($is_parent==1)
	  { 
	    foreach (array_keys(preg_grep('/'.$service_line.':'.'(.*)/',$service_line_array)) as $key) 
		    {
                unset($service_line_array[$key]);
            }
		    $service_line_array[] = $service_line;
	  }
		   else
		     {
			    $service_line_array[] = $service_line;
			 }
	}
	else
	{
	  $service_line_array[] = $service_line;
	}
	$service_line_term_array=field_service_line_get_term_serviceline($service_line_array);
	variable_set('service_line_set',array_combine($service_line_term_array,$service_line_array));
}


function field_service_line_user_insert(&$edit, $account, $category)
{
  /*$result =  db_query_range('SELECT usl.field_service_line_user_service_lines
  FROM {field_data_field_service_line} usl',
  0, 1, array());*/
	
  //print_r("<pre>");
 // print_r($result->fetchObject()->field_service_line_user_service_lines);
 // exit();
  $is_inserted = db_insert('user_service_lines') // Table name no longer needs {}
   ->fields(array(
  'user_id' => $account->uid,
  'service_lines' => serialize(implode("#",array_values(variable_get('service_line_set',array())))),
   ))
    ->execute();
	
}

function field_service_line_user_update(&$edit, $account, $category)
{ 
   $num_updated = db_update('user_service_lines')
  ->fields(array(
    'service_lines' => serialize(implode("#",array_values(variable_get('service_line_set',array())))),
  ))
  ->condition('user_id', variable_get('edit_user_id' ,0), '=')
  ->execute();
  variable_set('is_loaded',1);
}

function field_service_line_get_service_lines($user_instance,$userid)
{
  $userfieldinstance = field_info_field_by_id($user_instance);
  $table_name = 'field_data_'.$userfieldinstance['field_name'];
  $column_name = $userfieldinstance[storage][details][sql][FIELD_LOAD_CURRENT][$table_name][user_service_lines];
  $result =  db_query_range('SELECT '.$column_name.'
  FROM '.$table_name.'
  WHERE entity_id = :uid AND entity_type = :type',
  0, 1, array(':uid' => $userid ,':type' => 'user'));
  
  return explode('#',$result->fetchObject()->$column_name);
}

function field_service_line_node_insert($node)
{
 $is_inserted = db_insert('node_service_lines') // Table name no longer needs {}
   ->fields(array(
  'node_id' => $node->nid,
  'service_lines' => serialize(implode("#",array_values(variable_get('service_line_set',array())))),
   ))
    ->execute();
}

function field_service_line_is_parent($service_paths,$child)
{
$term_ids = explode(':',$service_paths);
$parent = $term_ids[count($term_ids)-1];
$childs = taxonomy_get_children($parent);
if(array_key_exists($child,$childs))
   {  
      return 1;
   }
 return 0;
}

function field_service_line_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items)
{
	global $user ;
	/*print_r("<pre>");
    print_r($entity_type);
	print_r($entity);
	print_r($field);
	print_r($instance);
	print_r($langcode);
	print_r($items);
	exit();*/
	if($field['type'] == 'user_service_lines_type')
	{   $data = array_values(variable_get('service_line_set',array()));
		if(count(data)!=0)
		{
	     $items[0][user_service_lines] =  implode("#",array_values(variable_get('service_line_set',array())));
		}
		else
		{
			unset($field);
			unset($entity);
			unset($instance);
			unset($items);
		}
	}

}

function field_service_line_field_update($entity_type, $entity, $field, $instance, $langcode, &$items)
{
	
	/*$query = new EntityFieldQuery;
	$field = field_read_field( $field[field_name], $include_additional = array());
	$table_name = 'field_data_'.$field[field_name];
	$result = $query
    ->entityCondition('entity_type', $entity_type)
	->entityCondition('entity_id', "$entity->uid")
	->entityCondition('bundle', $instance[bundle])
    ->execute();*/
	//$user_fields = user_load($entity->uid);
	//$field_items = field_get_items('user', $user_fields, 'field_userservice');
	//print_r(field_info_field_by_id());
	//print_r(field_read_field( $field[field_name], $include_additional = array()));
	//print_r(field_view_field($entity_type, $entity,$field[field_name], $display = array(), $langcode = NULL));
    //print_r(field_read_fields(array('entity_id'=>$entity->uid)));
	if($field['type'] == 'user_service_lines_type')
	{
	$items[0][user_service_lines] =  implode("#",array_values(variable_get('service_line_set',array())));
	}
	 
}

function field_service_line_field_create_instance($instance){
	if( $instance['entity_type']=='user' && $instance['bundle']=='user')
	{
		$user_instance = variable_get("user_instance",-1);
		if($user_instance == -1)
		{
			variable_set("user_instance",$instance[field_id]);
		}
	}
		
    //print_r("<pre>");
   // print_r(field_info_field_by_id($instance[field_id]));
	//exit();
	/*[field_name] => field_servlinef
    [entity_type] => node
    [bundle] => forum
    [label] => servline
    [widget] => Array
        (
            [type] => field_service_line_hierarchical_select
            [weight] => 32
        )

    [field_id] => 71
  // fetch the instance info*/
}

function field_service_line_user_login(&$edit, $account)
{
	variable_set('service_line_set',array());
}

function field_service_line_init()
{
	variable_set('data_loaded',1);
}